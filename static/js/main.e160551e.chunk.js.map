{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ValueButton","amount","this","props","app","state","characters","i","name","toLowerCase","updateCharacters","className","onClick","updateVal","val","React","Component","App","localStorage","getItem","setState","JSON","parse","window","confirm","splice","setItem","stringify","length","map","char","key","removePlayer","hp","gold","prompt","push","renderCharacters","addPlayer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e160551e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass ValueButton extends React.Component {\n  updateVal(amount) {\n    this.props.app.state.characters[this.props.i][this.props.name.toLowerCase()] += amount;\n    this.props.app.updateCharacters();\n  }\n\n  render() {\n    return (\n      <div className=\"value-button\">\n        <button onClick={() => this.updateVal(-100)}>-100</button>\n        <button onClick={() => this.updateVal(-10)}>-10</button>\n        <button onClick={() => this.updateVal(-1)}>-1</button>\n        <div className=\"value-button--value\">\n          {this.props.name}\n          <br />\n          {this.props.val}\n        </div>\n        <button onClick={() => this.updateVal(1)}>+1</button>\n        <button onClick={() => this.updateVal(10)}>+10</button>\n        <button onClick={() => this.updateVal(100)}>+100</button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: [],\n    };\n  }\n\n  componentWillMount() {\n    let characters = localStorage.getItem('characters');\n    if (characters) this.setState({ characters: JSON.parse(characters) });\n  }\n\n  removePlayer(i) {\n    if (window.confirm('Are you sure?')) {\n      this.state.characters.splice(i, 1);\n      this.updateCharacters();\n    }\n  }\n\n  updateCharacters() {\n    this.setState({ characters: this.state.characters });\n    localStorage.setItem('characters', JSON.stringify(this.state.characters));\n  }\n\n  renderCharacters() {\n    if (this.state.characters.length === 0) return <p>No characters</p>;\n    return this.state.characters.map((char, i) => (\n      <div className=\"character\" key={char.name}>\n        <div className=\"character-name\">\n          {char.name}\n          <button onClick={() => this.removePlayer(i)}>X</button>\n        </div>\n        <ValueButton i={i} val={char.hp} name=\"HP\" app={this}></ValueButton>\n        <ValueButton i={i} val={char.gold} name=\"Gold\" app={this}></ValueButton>\n      </div>\n    ));\n  }\n\n  addPlayer() {\n    let name = prompt('Player name:');\n    if (!name) return;\n    this.state.characters.push({ name, hp: 0, gold: 0 });\n    this.updateCharacters();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"action-bar\">\n          <h2>D&D Tracker</h2>\n        </div>\n        <div className=\"container\">\n          <div className=\"characters-list\">{this.renderCharacters()}</div>\n        </div>\n        <button className=\"fab\" onClick={() => this.addPlayer()}>\n          +\n        </button>\n        <p className=\"version-number\">v0.4</p>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}